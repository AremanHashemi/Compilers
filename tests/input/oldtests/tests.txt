    {
    "name": "nested",
    "code": "file",
    "result": { "value": "(1, (2, 3, 4), 5)"}
   },
   {
    "name": "tooHigh",
    "code": "let x = (1,2,3) in x[3]",
    "result": { "failure" : "Error: tuple index too large"}
   },
   {
    "name": "tooLow",
    "code": "let x = (1,2,3) in x[(1-4)]",
    "result": { "failure" : "Error: tuple index too small"}
   },
   {
    "name": "invalidIndex",
    "code": "let x = (1,2,3) in x[true]",
    "result": { "failure" : "Error: expected a number but got 0xfffffff"}
   },
   {
    "name": "invalidPointer",
    "code": "let x = 3 in x[0]",
    "result": { "failure" : "Error: expected a tuple but got 0x00000006"}
   },
   {
    "name": "heavyLoad",
    "code": "file",
    "result": { "value" : "((1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16), (17, 18, 19, 20, 21, 22, 23))\n"}
   },
   {
    "name": "heavyLoad2",
    "code": "file",
    "result": { "value" : "(31, 32)\n"}
   },
   {
    "name"   : "smallAirity",
    "code"   : "file",
    "result" : { "failure": "" }
},
{
  "name"   : "largeAirity",
  "code"   : "file",
  "result" : { "failure": "" }
},
{
"name"   : "undefLocal",
"code"   : "file",
"result" : { "failure": "" }
},
{
"name"   : "dupFunc",
"code"   : "file",
"result" : {"failure": ""}
},
{
"name"  : "Incorrect-Arity",
"code"   : "def f(x, y):\n  y\nf(1)",
"result" : { "failure" : "arity"}
},
{
"name"  : "Duplicate-Params",
"code"   : "def f(x, x):\n  x\nf(1,1)",
"result" : { "failure" : "duplicate parameter"}
},
{
"name"  : "Duplicate-Functions",
"code"   : "def f(x):\n  x\ndef f(x):\n  x\nf(1)",
"result" : { "failure" : "duplicate function"}
},
{
"name"  : "Shadow-Bindings",
"code"   : "let x=5 in let x=2 in x",
"result" : { "failure" : "shadow binding"}
},
{
"name"  : "Variable-Unbound",
"code"   : "def f(x):\n  y\nf(1)",
"result" : { "failure" : "unbound variable"}
},
{
"name"  : "Function-Undefined",
"code"   : "def f(x):\n  x\ng(1)",
"result" : { "failure" : "not defined"}
},
{
"name": "Max-Int-Test",
"code": "1073741824 ",
"result": { "failure": "too large" }
},
{
"name": "Function-Param-Test",
"code": "def f(x):\n 0 \nf(1073741824)",
"result": { "failure": "too large" }
},
{
"name": "Function-Body-Test",
"code": "def f(x):\n y \nf(1)",
"result": { "failure": "unbound variable" }
},
{
"name": "Tail-Recursion-Simple-1",
"code": "def f(x):\nif x == 0: 0\n else: f(x-1)\n f(100000000)",
"result": { "value":"0" }
},
{
"name": "Tail-Recursion-Simple-2",
"code": "def f( x, y, z):\nif x == 0: x\n else: f(x-1, y, print(x-y))\n f(3,3,0)",
"result": { "value":"0\n-1\n-2\n0\n" }
},
{
"name": "Tail-Recursion-Advanced",
"code": "def f(x, y, z):\nif x < z:\n0\nelse:\nf(y, z, x)\nf(1, 0, 1)",
"result": { "value": "0" }
},

    {
    "name": "boolNum",
    "code": "true == 1",
    "result": { "value": "false" }
    },
    {
    "name": "boolBool",
    "code": "false == false",
    "result": { "value": "true" }
    },
    {
    "name": "tupNum",
    "code": "(1,2) == 1",
    "result": { "value": "false" }
    }, 
    {
    "name": "tupBool",
    "code": "(1,2) == true",
    "result": { "value": "false" }
    }, 
    {
    "name": "addressCmp",
    "code": "let t = (1,2) in t == t",
    "result": { "value": "true" }
    },
    {
        "name": "tupUnary",
        "code": "print((4, (true, 3)))",
        "result": { "value": "(4, (true, 3))\n(4, (true, 3))\n" }
    },
    {
        "name": "nestedAccess",
        "code": "let x = (1, (true, 4), false, (1, true)) in (x[3])[1]",
        "result": { "value": "true" }
    }
